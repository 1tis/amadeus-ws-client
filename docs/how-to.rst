======
HOW TO
======

How to use this library:

***************
Getting started
***************

See the `getting started guide <about-get-started.rst>`_.

***************************************************************
Switching between stateful & stateless messages (Soap Header 4)
***************************************************************

If you do not require an active context in your session, you're better off using stateless messages.

However, for many operations, you'll need an active context (a PNR context, a pricing context, ...).

You can easily switch from stateful to stateless messages at runtime with:

.. code-block:: php

    $client->setStateful(false); //Enable stateless messages

    $client->setStateful(true); //Enable stateful messages


It's also possible to specify the default stateful setting at construction time of the client **(stateful is enabled by default)**:

.. code-block:: php

    use Amadeus\Client;
    use Amadeus\Client\Params;

    $params = new Params([
        'sessionHandlerParams' => [
            //... other parameters omitted for clarity ...
            'stateful' => false,
        ]
    ]);

    $client = new Client($params);


*****************************************
Ending a stateful session (Soap Header 4)
*****************************************

After doing multiple calls with a stateful session, there are two ways to end the session:

- do a Security_SignOut call:

.. code-block:: php

    $client->signOut(); //Terminates an active stateful session. There is no active session with stateless messages.

- set an 'endSession' message option on the last call you want to make:

.. code-block:: php

    $client->pnrRetrieve(
        new PnrRetrieveOptions(['recordLocator' => 'ABC123']),
        ['endSession' => true]
    );

************************************
Handling sessions with Soap Header 2
************************************

Soap Header 2 based applications are a bit more cumbersome to handle in order to get a successful certification:

- you need to implement session pooling in order to limit the number of session creation/destruction events
- you need to enforce your maximum number of concurrent sessions
- you need to send a separate authentication message before you can do anything

This library does not provide any session pooling mechanism, you'll have to implement this yourself.

You can get a current session's info (for later re-use) by calling

.. code-block:: php

    $client->getSessionData();

You can restore a previous current session after you retrieved it from your session pool for later re-use:

.. code-block:: php

    $client->setSessionData($previousSessionData);

*********************
Handling the response
*********************

The response from a Web Service call made through this library will be an instance of the ``Amadeus\Client\Result`` class:
this object contains:

* A status to indicate if the message was successful (FATAL, ERROR, WARN, INFO, OK) (property ``status``)
* Any error or other messages that provide more information about the status (property ``messages``)
* The response object as generated by the ``\SoapClient`` (property ``response``)
* The message XML string (property ``responseXml``)

When processing a response from the Amadeus Web Services, the library will check for any error or other status messages in the response and set the status accordingly.

Sometimes it's useful if the result from the SOAP call gets returned as a PHP object,
sometimes a string containing the XML document of the SOAP-BODY is more useful.

For example, when trying to extract specific information from a PNR, it can be useful to load the
PNR_Reply as a ``\DOMDocument`` and query it using a ``\DOMXPath`` object.

For this, you can use the ``Amadeus\Client\Result::responseXml`` from the result.

******
Errors
******

The Amadeus web services can be tricky with regards to error detection. In most verbs, you have to look for the presence of error nodes in the response to see if everything went allright.

We try to ease your pain a little by analyzing the messages we support and look for error nodes. If any are found, we will put any error messages in the ``Amadeus\Client\Result::messages`` property of the result and set the result status accordingly.

If the Amadeus server responds with a ``\SoapFault``, the library will convert this to a ``Result`` object with status 'FATAL'.

To override this behaviour, look at the ``Amadeus\Client\ResponseHandler\ResponseHandlerInterface``.

**************************
Custom \SoapClient options
**************************

You can override the default ``\SoapClient`` options by passing them in the Session Handler Params:

.. code-block:: php

    $params = new Params([
        'sessionHandlerParams' => [
            'soapHeaderVersion' => Client::HEADER_V4, //This is the default value, can be omitted.
            'wsdl' => '/home/user/mytestproject/data/amadeuswsdl/1ASIWXXXXXX_PDT_20160101_080000.wsdl', //Points to the location of the WSDL file for your WSAP. Make sure the associated XSD's are also available.
            'stateful' => false, //Enable stateful messages by default - can be changed at will to switch between stateless & stateful.
            'logger' => new Psr\Log\NullLogger(),
            'soapClientOptions' => [
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP
            ]
            'authParams' => [
                'officeId' => 'BRUXX1111', //The Amadeus Office Id you want to sign in to - must be open on your WSAP.
                'userId' => 'WSBENXXX', //Also known as 'Originator' for Soap Header 1 & 2 WSDL's
                'passwordData' => 'dGhlIHBhc3N3b3Jk' // **base 64 encoded** password
            ]
        ],
        'requestCreatorParams' => [
            'receivedFrom' => 'my test project' // The "Received From" string that will be visible in PNR History
        ]
    ]);

\SoapClient options provided as such will override the default settings defined in
``Amadeus\Client\Session\Handler\Base::$soapClientOptions`` and must be provided in the correct
format as specified in the PHP manual: http://php.net/manual/en/soapclient.soapclient.php

================
EXAMPLE MESSAGES
================

See `examples <samples.rst>`_.