========
EXAMPLES
========

Here are some examples of how you can handle some problems you might encounter and how to send specific messages.

***************************************************************
Switching between stateful & stateless messages (Soap Header 4)
***************************************************************

If you do not require an active context in your session, you're better off using stateless messages.

However, for many operations, you'll need an active context (a PNR context, a pricing context, ...).

You can easily switch from stateful to stateless messages at runtime with:

.. code-block:: php

    $client->setStateful(false); //Enable stateless messages

    $client->setStateful(true); //Enable stateful messages


It's also possible to specify the default stateful setting at construction time of the client **(stateful is enabled by default)**:

.. code-block:: php

    use Amadeus\Client;
    use Amadeus\Client\Params;

    $params = new Params([
        'sessionHandlerParams' => [
            //... other parameters omitted for clarity ...
            'stateful' => false,
        ]
    ]);

    $client = new Client($params);


*****************************************
Ending a stateful session (Soap Header 4)
*****************************************

After doing multiple calls with a stateful session, there are two ways to end the session:

- do a Security_SignOut call:

.. code-block:: php

    $client->signOut(); //Terminates an active stateful session. There is no active session with stateless messages.

- set an 'endSession' message option on the last call you want to make:

.. code-block:: php

    $client->pnrRetrieve(
        new PnrRetrieveOptions(['recordLocator' => 'ABC123']),
        ['endSession' => true]
    );

************************************
Handling sessions with Soap Header 2
************************************

Soap Header 2 based applications are a bit more cumbersome to handle in order to get a successful certification:

- you need to implement session pooling in order to limit the number of session creation/destruction events
- you need to enforce your maximum number of concurrent sessions
- you need to send a separate authentication message before you can do anything

This library does not provide any session pooling mechanism, you'll have to implement this yourself.

You can get a current session's info (for later re-use) by calling

.. code-block:: php

    $client->getSessionData();

You can restore a previous current session after you retrieved it from your session pool for later re-use:

.. code-block:: php

    $client->setSessionData($previousSessionData);

*********************
Handling the response
*********************

The response from a Web Service call made through this library will be an instance of the ``Amadeus\Client\Result`` class:
this object contains:

* A status to indicate if the message was successful (FATAL, ERROR, WARN, INFO, OK) (property ``status``)
* Any error or other messages that provide more information about the status (property ``messages``)
* The response object as generated by the ``\SoapClient`` (property ``response``)
* The message XML string (property ``responseXml``)

When processing a response from the Amadeus Web Services, the library will check for any error or other status messages in the response and set the status accordingly.

Sometimes it's useful if the result from the SOAP call gets returned as a PHP object,
sometimes a string containing the XML document of the SOAP-BODY is more useful.

For example, when trying to extract specific information from a PNR, it can be useful to load the
PNR_Reply as a ``\DOMDocument`` and query it using a ``\DOMXPath`` object.

For this, you can use the ``Amadeus\Client\Result::responseXml`` from the result.

******
Errors
******

The Amadeus web services can be tricky with regards to error detection. In most verbs, you have to look for the presence of error nodes in the response to see if everything went allright.

We try to ease your pain a little by analyzing the messages we support and look for error nodes. If any are found, we will put any error messages in the ``Amadeus\Client\Result::messages`` property of the result and set the result status accordingly.

If the Amadeus server responds with a ``\SoapFault``, the library will convert this to a ``Result`` object with status 'FATAL'.

To override this behaviour, look at the ``Amadeus\Client\ResponseHandler\ResponseHandlerInterface``.

**************************
Custom \SoapClient options
**************************

You can override the default ``\SoapClient`` options by passing them in the Session Handler Params:

.. code-block:: php

    $params = new Params([
        'sessionHandlerParams' => [
            'soapHeaderVersion' => Client::HEADER_V4, //This is the default value, can be omitted.
            'wsdl' => '/home/user/mytestproject/data/amadeuswsdl/1ASIWXXXXXX_PDT_20160101_080000.wsdl', //Points to the location of the WSDL file for your WSAP. Make sure the associated XSD's are also available.
            'stateful' => false, //Enable stateful messages by default - can be changed at will to switch between stateless & stateful.
            'logger' => new Psr\Log\NullLogger(),
            'soapClientOptions' => [
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP
            ]
            'authParams' => [
                'officeId' => 'BRUXX1111', //The Amadeus Office Id you want to sign in to - must be open on your WSAP.
                'userId' => 'WSBENXXX', //Also known as 'Originator' for Soap Header 1 & 2 WSDL's
                'passwordData' => 'dGhlIHBhc3N3b3Jk' // **base 64 encoded** password
            ]
        ],
        'requestCreatorParams' => [
            'receivedFrom' => 'my test project' // The "Received From" string that will be visible in PNR History
        ]
    ]);

\SoapClient options provided as such will override the default settings defined in
``Amadeus\Client\Session\Handler\Base::$soapClientOptions`` and must be provided in the correct
format as specified in the PHP manual: http://php.net/manual/en/soapclient.soapclient.php

***
PNR
***

--------------------
PNR_AddMultiElements
--------------------

Creating a PNR (simplified example containing only the most basic PNR elements needed to save the PNR):

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCreatePnrOptions;
    use Amadeus\Client\RequestOptions\Pnr\Traveller;
    use Amadeus\Client\RequestOptions\Pnr\Segment;
    use Amadeus\Client\RequestOptions\Pnr\Segment\Miscellaneous;
    use Amadeus\Client\RequestOptions\Pnr\Element\Ticketing;
    use Amadeus\Client\RequestOptions\Pnr\Element\Contact;

    $opt = new PnrCreatePnrOptions();
    $opt->actionCode = PnrCreatePnrOptions::ACTION_NO_PROCESSING; //0 Do not yet save the PNR and keep in context.
    $opt->travellers[] = new Traveller([
        'number' => 1,
        'firstName' => 'FirstName',
        'lastName' => 'LastName'
    ]);
    $opt->tripSegments[] = new Miscellaneous([
        'status ' => Segment::STATUS_CONFIRMED,
        'company' => '1A',
        'date' => \DateTime::createFromFormat('Ymd', '20161022', new \DateTimeZone('UTC')),
        'cityCode' => 'BRU',
        'freeText' => 'DUMMY MISCELLANEOUS SEGMENT'
    ]);

    $opt->elements[] = new Amadeus\Client\RequestOptions\Pnr\Element\Ticketing([
        'ticketMode' => Ticketing::TICKETMODE_OK
    ]);
    $opt->elements[] = new Contact([
        'type' => Contact::TYPE_PHONE_MOBILE,
        'value' => '+3222222222'
    ]);

    //The required Received From (RF) element will automatically be added by the library if you didn't provide one.

    $createdPnr = $client->pnrCreatePnr($opt);


Save a PNR which you have in context (created with actionCode 0 for example) and is now ready to be saved:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrAddMultiElementsOptions;

    $pnrReply = $client->pnrAddMultiElements(
        new PnrAddMultiElementsOptions([
            'actionCode' => PnrAddMultiElementsOptions::ACTION_END_TRANSACT_RETRIEVE //ET: END AND RETRIEVE
        ])
    );

`More examples of PNR creation and modification <samples/pnr-create-modify.rst>`_

------------
PNR_Retrieve
------------

Retrieving a PNR:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrRetrieveOptions;

    $pnrContent = $client->pnrRetrieve(
        new PnrRetrieveOptions(['recordLocator' => 'ABC123'])
    );


----------------------
PNR_RetrieveAndDisplay
----------------------

Retrieving a PNR with PNR content AND all offers:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrRetrieveAndDisplayOptions;

    $pnrContent = $client->pnrRetrieveAndDisplay(
        new PnrRetrieveAndDisplayOptions([
            'recordLocator' => 'ABC123',
            'retrieveOption' => PnrRetrieveAndDisplayOptions::RETRIEVEOPTION_ALL
        ])
    );

----------
PNR_Cancel
----------

Cancel the entire itinerary of the PNR in context and do an end transact to save the changes:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCancelOptions;

    $cancelReply = $client->pnrCancel(
        new PnrCancelOptions([
            'cancelItinerary' => true,
            'actionCode' => PnrCancelOptions::ACTION_END_TRANSACT
        ])
    );


Cancel a PNR element with tattoo number 15 and do an End and Retrieve (ER) to receive the resulting PNR_Reply:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCancelOptions;

    $cancelReply = $client->pnrCancel(
        new PnrCancelOptions([
            'elementsByTattoo' => [15],
            'actionCode' => PnrCancelOptions::ACTION_END_TRANSACT_RETRIEVE
        ])
    );

Same as before, but this time without having a PNR in context (you must provide the PNR's record locator)

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCancelOptions;

    $cancelReply = $client->pnrCancel(
        new PnrCancelOptions([
            'recordLocator' => 'ABC123,
            'elementsByTattoo' => [15],
            'actionCode' => PnrCancelOptions::ACTION_END_TRANSACT_RETRIEVE
        ])
    );

Cancel the Offer with Offer reference 1:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCancelOptions;

    $cancelReply = $client->pnrCancel(
        new PnrCancelOptions([
            'offers' => [1]
        ])
    );

Remove passenger with passenger reference 2 from the PNR:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PnrCancelOptions;

    $cancelReply = $client->pnrCancel(
        new PnrCancelOptions([
            'passengers' => [2]
        ])
    );

*****
Queue
*****

----------
Queue_List
----------

Get a list of all PNR's on a given queue:

.. code-block:: php

    use Amadeus\Client\RequestOptions\QueueListOptions;
    use Amadeus\Client\RequestOptions\Queue;

    $queueContent = $client->queueList(
        new QueueListOptions([
            'queue' => new Queue([
                'queue' => 50,
                'category' => 0
            ])
        ])
    );

--------------
Queue_PlacePNR
--------------

Place a PNR on a queue:

.. code-block:: php

    use Amadeus\Client\RequestOptions\QueuePlacePnrOptions;
    use Amadeus\Client\RequestOptions\Queue;

    $placeResult = $client->queuePlacePnr(
        new QueuePlacePnrOptions([
            'targetQueue' => new Queue([
                'queue' => 50,
                'category' => 0
            ]),
            'recordLocator' => 'ABC123'
        ])
    );

----------------
Queue_RemoveItem
----------------

Remove a PNR from a queue:

.. code-block:: php

    use Amadeus\Client\RequestOptions\QueueRemoveItemOptions;
    use Amadeus\Client\RequestOptions\Queue;

    $removeResult = $client->queueRemoveItem(
        new QueueRemoveItemOptions([
            'queue' => new Queue([
                'queue' => 50,
                'category' => 0
            ]),
            'recordLocator' => 'ABC123'
        ])
    );

--------------
Queue_MoveItem
--------------

Move a PNR from one queue to another:

.. code-block:: php

    use Amadeus\Client\RequestOptions\QueueMoveItemOptions;
    use Amadeus\Client\RequestOptions\Queue;

    $moveResult = $client->queueMoveItem(
        new QueueMoveItemOptions([
            'sourceQueue' => new Queue([
                'queue' => 50,
                'category' => 0
            ]),
            'destinationQueue' => new Queue([
                'queue' => 60,
                'category' => 3
            ]),
            'recordLocator' => 'ABC123'
        ])
    );

****
Fare
****

----------------------------------
Fare_MasterPricerTravelboardSearch
----------------------------------

Make a simple Masterpricer availability & fare search:

.. code-block:: php

    use Amadeus\Client\RequestOptions\FareMasterPricerTbSearch;
    use Amadeus\Client\RequestOptions\Fare\MPPassenger;
    use Amadeus\Client\RequestOptions\Fare\MPItinerary;
    use Amadeus\Client\RequestOptions\Fare\MPDate;
    use Amadeus\Client\RequestOptions\Fare\MPLocation;

    $opt = new FareMasterPricerTbSearch([
        'nrOfRequestedResults' => 200,
        'nrOfRequestedPassengers' => 1,
        'passengers' => [
            new MPPassenger([
                'type' => MPPassenger::TYPE_ADULT,
                'count' => 1
            ])
        ],
        'itinerary' => [
            new MPItinerary([
                'departureLocation' => new MPLocation(['city' => 'BRU']),
                'arrivalLocation' => new MPLocation(['city' => 'LON']),
                'date' => new MPDate([
                    'date' => new \DateTime('2017-01-15T00:00:00+0000', new \DateTimeZone('UTC'))
                ])
            ])
        ]
    ]);

    $recommendations = $client->fareMasterPricerTravelBoardSearch($opt);

-----------------------------
Fare_PricePNRWithBookingClass
-----------------------------

Do a pricing on the PNR in context:

.. code-block:: php

    use Amadeus\Client\RequestOptions\FarePricePnrWithBookingClassOptions;

    $pricingResponse = $client->farePricePnrWithBookingClass(
        new FarePricePnrWithBookingClassOptions([
            'validatingCarrier' => 'SN'
        ])
    );

---------------
Fare_CheckRules
---------------

Get Fare Rules information for a pricing in context:

.. code-block:: php

    use Amadeus\Client\RequestOptions\FareCheckRulesOptions;

    $rulesResponse = $client->fareCheckRules(
        new FareCheckRulesOptions([
            'recommendations' => [1] //Pricing nr 1
        ])
    );


--------------------
Fare_ConvertCurrency
--------------------

Convert 200 Euro to US Dollars in today's exchange rate:

.. code-block:: php

    use Amadeus\Client\RequestOptions\FareConvertCurrencyOptions;

    $rulesResponse = $client->fareConvertCurrency(
        new FareConvertCurrencyOptions([
            'from' => 'EUR',
            'to' => 'USD',
            'amount' => '200',
            'rateOfConversion' => FareConvertCurrencyOptions::RATE_TYPE_BANKERS_SELLER_RATE
        ])
    );

Convert 200 Euro to US Dollars in the exchange rate of 25th December 2015 *(this option only works up until 12 months in the past)*:

.. code-block:: php

    use Amadeus\Client\RequestOptions\FareConvertCurrencyOptions;

    $rulesResponse = $client->fareConvertCurrency(
        new FareConvertCurrencyOptions([
            'from' => 'EUR',
            'to' => 'USD',
            'amount' => '200',
            'date' => \DateTime::createFromFormat('Y-m-d', '2015-12-25', new \DateTimeZone('UTC')),
            'rateOfConversion' => FareConvertCurrencyOptions::RATE_TYPE_BANKERS_SELLER_RATE
        ])
    );


***
Air
***

--------------------------
Air_SellFromRecommendation
--------------------------

To book the chosen recommendation from the Fare_MasterPricerTravelBoardSearch result:

.. code-block:: php

    use Amadeus\Client\RequestOptions\AirSellFromRecommendationOptions;
    use Amadeus\Client\RequestOptions\Air\SellFromRecommendation\Itinerary;
    use Amadeus\Client\RequestOptions\Air\SellFromRecommendation\Segment;

    $opt = new AirSellFromRecommendationOptions([
        'itinerary' => [
            new Itinerary([
                'from' => 'BRU',
                'to' => 'LON',
                'segments' => [
                    new Segment([
                        'departureDate' => \DateTime::createFromFormat('Ymd','20170120', new \DateTimeZone('UTC')),
                        'from' => 'BRU',
                        'to' => 'LGW',
                        'companyCode' => 'SN',
                        'flightNumber' => '123',
                        'bookingClass' => 'Y',
                        'nrOfPassengers' => 1,
                        'statusCode' => Segment::STATUS_SELL_SEGMENT
                    ])
                ]
            ])
        ]
    ]);

    $sellResult = $client->airSellFromRecommendation($opt);

--------------
Air_FlightInfo
--------------

Get flight info for a specific flight:

.. code-block:: php

    use Amadeus\Client\RequestOptions\AirFlightInfoOptions;

    $flightInfo = $client->airFlightInfo(
        new AirFlightInfoOptions([
            'airlineCode' => 'SN',
            'flightNumber' => '652',
            'departureDate' => \DateTime::createFromFormat('Y-m-d', '2016-05-18'),
            'departureLocation' => 'BRU',
            'arrivalLocation' => 'LIS'
        ])
    );


******
Ticket
******

---------------------------
Ticket_CreateTSTFromPricing
---------------------------

Create a TST from a Pricing made by a Fare_PricePNRWithBookingClass call:

.. code-block:: php

    use Amadeus\Client\RequestOptions\TicketCreateTstFromPricingOptions;
    use Amadeus\Client\RequestOptions\Ticket\Pricing;

    $createTstResponse = $client->ticketCreateTSTFromPricing(
        new TicketCreateTstFromPricingOptions([
            'pricings' => [
                new Pricing([
                    'tstNumber' => 1
                ])
            ]
        ])
    );

-----------------
Ticket_DisplayTST
-----------------

View the TST's of a PNR:


***********
DocIssuance
***********

-----------------------
DocIssuance_IssueTicket
-----------------------

Issue ticket for an entire PNR as e-Ticket (TTP/ET):

.. code-block:: php

    use Amadeus\Client\RequestOptions\DocIssuanceIssueTicketOptions;

    $issueTicketResponse = $client->docIssuanceIssueTicket(
        new DocIssuanceIssueTicketOptions([
            'options' => [
                DocIssuanceIssueTicketOptions::OPTION_ETICKET
            ]
        ])
    );

Issue e-Ticket for one single TST and retrieve PNR (TTP/T1/ET/RT):

.. code-block:: php

    use Amadeus\Client\RequestOptions\DocIssuanceIssueTicketOptions;

    $issueTicketResponse = $client->docIssuanceIssueTicket(
        new DocIssuanceIssueTicketOptions([
            'options' => [
                DocIssuanceIssueTicketOptions::OPTION_ETICKET,
                DocIssuanceIssueTicketOptions::OPTION_RETRIEVE_PNR
            ],
            'tsts' => [1]
        ])
    );

****
Info
****
---------------------
Info_EncodeDecodeCity
---------------------

Get information about IATA code 'OPO':

.. code-block:: php

    use Amadeus\Client\RequestOptions\InfoEncodeDecodeCityOptions;

    $infoResponse = $client->infoEncodeDecodeCity(
        new InfoEncodeDecodeCityOptions([
            'locationCode' => 'OPO'
        ])
    );

Do a phonetic search for locations sounding like "Brussels":

.. code-block:: php

    use Amadeus\Client\RequestOptions\InfoEncodeDecodeCityOptions;

    $infoResponse = $client->infoEncodeDecodeCity(
        new InfoEncodeDecodeCityOptions([
            'locationName' => 'brussels',
            'searchMode' => InfoEncodeDecodeCityOptions::SEARCHMODE_PHONETIC
        ])
    );

Find all train stations in New York:

.. code-block:: php

    use Amadeus\Client\RequestOptions\InfoEncodeDecodeCityOptions;

    $infoResponse = $client->infoEncodeDecodeCity(
        new InfoEncodeDecodeCityOptions([
            'locationCode' => 'NYC',
            'selectResult' => InfoEncodeDecodeCityOptions::SELECT_TRAIN_STATIONS
        ])
    );

*****
Offer
*****
-----------------
Offer_VerifyOffer
-----------------
Verify if an offer is still valid:

.. code-block:: php

    use Amadeus\Client\RequestOptions\OfferVerifyOptions;

    $offerVerifyResponse = $client->offerVerify(
        new OfferVerifyOptions([
            'offerReference' => 1,
            'segmentName' => 'AIR'
        ])
    );

---------------------
Offer_ConfirmAirOffer
---------------------
Confirm a given AIR offer by providing office reference / tattoo:

.. code-block:: php

    use Amadeus\Client\RequestOptions\OfferConfirmAirOptions;

    $response = $client->offerConfirmAir(
        new OfferConfirmAirOptions([
            'tattooNumber' => 1
        ])
    );

-----------------------
Offer_ConfirmHotelOffer
-----------------------
Confirm a given HOTEL offer:

.. code-block:: php

    use Amadeus\Client\RequestOptions\OfferConfirmHotelOptions;
    use Amadeus\Client\RequestOptions\Offer\PaymentDetails;

    $opt = new OfferConfirmHotelOptions([
        'recordLocator' => 'ABC123',
        'offerReference' => 2,
        'passengers' => [1],
        'originatorId' => '123456',
        'paymentType' => OfferConfirmHotelOptions::PAYMENT_GUARANTEED,
        'formOfPayment' => OfferConfirmHotelOptions::FOP_CREDIT_CARD,
        'paymentDetails' => new PaymentDetails([
            'ccCardNumber' => '4444333322221111',
            'ccCardHolder' => 'David Bowie',
            'ccExpiry' => '1117',
            'ccVendor' => 'AX',
        ])
    ]);

    $response = $client->offerConfirmHotel($opt);

---------------------
Offer_ConfirmCarOffer
---------------------
Confirm a given CAR offer:

.. code-block:: php

    use Amadeus\Client\RequestOptions\OfferConfirmCarOptions;
    use Amadeus\Client\RequestOptions\Offer\CarLocationInfo;

    $opt = new OfferConfirmCarOptions([
        'passengerTattoo' => 1,
        'offerTattoo' => 2,
        'recordLocator' => 'ABC123',
        'pickUpInfo' => new CarLocationInfo([
            'address' => 'RUE DE LA LIBERATION',
            'city' => 'NICE',
            'zipCode' => '06000',
            'countryCode' => 'FR',
            'phoneNumber' => '1234567890'
        ]),
        'dropOffInfo' => new CarLocationInfo([
            'address' => 'ROUTE DE VALBONNE',
            'city' => 'BIOT',
            'zipCode' => '06410',
            'countryCode' => 'FR',
            'phoneNumber' => '0123456789'
        ]),
    ]);

    $response = $client->offerConfirmCar($opt);

********
MiniRule
********
--------------------------
MiniRule_GetFromPricingRec
--------------------------

Get MiniRules for a pricing in context (either a TST pricing, Offers or a pricing quotation):

.. code-block:: php

    use Amadeus\Client\RequestOptions\MiniRuleGetFromPricingRecOptions;
    use Amadeus\Client\RequestOptions\MiniRule\Pricing;

    $miniRulesResponse = $client->miniRuleGetFromPricingRec(
        new MiniRuleGetFromPricingRecOptions([
            'pricings' => [
                new Pricing([
                    'type' => Pricing::TYPE_TST,
                    'id' => Pricing::ALL_PRICINGS
                ])
            ]
        ])
    );


***************
Command_Cryptic
***************

Send any cryptic Amadeus Selling Platform entry which does not have a structured equivalent in webservices:

.. code-block:: php

    use Amadeus\Client\RequestOptions\CommandCrypticOptions;
    use Amadeus\Client;

    $opt = new CommandCrypticOptions([
        'entry' => 'DAC LON'
    ]);

    $crypticResponse = $client->commandCryptic($opt);

**************************
PriceXplorer_ExtremeSearch
**************************

Request a basic Extreme Search result:

.. code-block:: php

    use Amadeus\Client\RequestOptions\PriceXplorerExtremeSearchOptions;

    $opt = new PriceXplorerExtremeSearchOptions([
        'resultAggregationOption' => PriceXplorerExtremeSearchOptions::AGGR_COUNTRY,
        'origin' => 'BRU',
        'destinations' => ['SYD', 'CBR'],
        'earliestDepartureDate' => \DateTime::createFromFormat('Y-m-d','2016-08-25', new \DateTimeZone('UTC')),
        'latestDepartureDate' => \DateTime::createFromFormat('Y-m-d','2016-09-28', new \DateTimeZone('UTC')),
        'searchOffice' => 'LONBG2222'
    ]);

    $extremeSearchResult = $client->priceXplorerExtremeSearch($opt);

